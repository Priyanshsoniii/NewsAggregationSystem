// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsAggregation.Server.Data;

#nullable disable

namespace NewsAggregation.Server.Migrations
{
    [DbContext(typeof(NewsAggregationContext))]
    [Migration("20250702063157_ReportingAndFilteringFeatures")]
    partial class ReportingAndFilteringFeatures
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8269),
                            Description = "Business and finance news",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8273),
                            Description = "Entertainment and celebrity news",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Entertainment"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8275),
                            Description = "Sports news and updates",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8276),
                            Description = "Technology and innovation news",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8278),
                            Description = "General news and current events",
                            IsActive = true,
                            IsHidden = false,
                            Name = "General"
                        });
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.ExternalServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentHourRequests")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastHourReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RequestsPerHour")
                        .HasColumnType("int");

                    b.Property<string>("ServerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ExternalServers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = "YOUR_NEWS_API_KEY",
                            ApiUrl = "https://newsapi.org/v2/top-headlines",
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8427),
                            CurrentHourRequests = 0,
                            IsActive = true,
                            LastHourReset = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8427),
                            Name = "NewsAPI",
                            RequestsPerHour = 1000,
                            ServerType = "NewsAPI"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = "2iEVsACWuYsI8wRG8VrwA972129RYibJJRBw0bzG",
                            ApiUrl = "https://api.thenewsapi.com/v1/news/top",
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8431),
                            CurrentHourRequests = 0,
                            IsActive = true,
                            LastHourReset = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8431),
                            Name = "The News API",
                            RequestsPerHour = 1000,
                            ServerType = "TheNewsAPI"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = "af3ce09176fb4fd3be6fcfd1e000776c",
                            ApiUrl = "https://us-central1-symbolic-gift-98004.cloudfunctions.net/newsapi",
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8475),
                            CurrentHourRequests = 0,
                            IsActive = true,
                            LastHourReset = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8475),
                            Name = "Firebase API",
                            RequestsPerHour = 1000,
                            ServerType = "Firebase"
                        });
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.FilteredKeyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Keyword")
                        .IsUnique();

                    b.ToTable("FilteredKeywords");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.NewsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublishedAt");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("NewsArticles");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RelatedArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("RelatedArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewsArticleId");

                    b.HasIndex("UserId", "NewsArticleId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.SavedArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NewsArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewsArticleId");

                    b.HasIndex("UserId", "NewsArticleId")
                        .IsUnique();

                    b.ToTable("SavedArticles");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 2, 6, 31, 56, 98, DateTimeKind.Utc).AddTicks(8495),
                            Email = "admin@newsaggregator.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$LBqoiEObHfGV7TH/jWdCquiAFXp/WRmTTmxxV0PHp9Jj2aXPvRJ5G",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.UserNotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId", "CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.ToTable("UserNotificationSettings");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.NewsArticle", b =>
                {
                    b.HasOne("NewsAggregation.Server.Models.Entities.Category", "Category")
                        .WithMany("NewsArticles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.Notification", b =>
                {
                    b.HasOne("NewsAggregation.Server.Models.Entities.NewsArticle", "RelatedArticle")
                        .WithMany()
                        .HasForeignKey("RelatedArticleId");

                    b.HasOne("NewsAggregation.Server.Models.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedArticle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.Report", b =>
                {
                    b.HasOne("NewsAggregation.Server.Models.Entities.NewsArticle", "NewsArticle")
                        .WithMany()
                        .HasForeignKey("NewsArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsAggregation.Server.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsArticle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.SavedArticle", b =>
                {
                    b.HasOne("NewsAggregation.Server.Models.Entities.NewsArticle", "NewsArticle")
                        .WithMany("SavedByUsers")
                        .HasForeignKey("NewsArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsAggregation.Server.Models.Entities.User", "User")
                        .WithMany("SavedArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsArticle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.UserNotificationSetting", b =>
                {
                    b.HasOne("NewsAggregation.Server.Models.Entities.Category", "Category")
                        .WithMany("UserNotificationSettings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NewsAggregation.Server.Models.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.Category", b =>
                {
                    b.Navigation("NewsArticles");

                    b.Navigation("UserNotificationSettings");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.NewsArticle", b =>
                {
                    b.Navigation("SavedByUsers");
                });

            modelBuilder.Entity("NewsAggregation.Server.Models.Entities.User", b =>
                {
                    b.Navigation("NotificationSettings");

                    b.Navigation("Notifications");

                    b.Navigation("SavedArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
